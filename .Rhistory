aes(x=state,
y=estimate,
fill=state)) +
geom_point(aes(color=state),
position = position_jitter(width = 0.07),
size = 0.6,
alpha = 0.65) +
geom_boxplot(width = 0.5, outlier.shape = NA, alpha = 0.25)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
scale_x_discrete(labels= c(
"rainforest",
"generalist",
"open-vegetation"
)
) +
xlab("habitat range") +
ylab(paste(param_symbol, y_axis_name, sep = " ") )+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=10,face="bold"),
axis.text=element_text(size=8),
legend.position = "none")
### exporting directory
dir_out = "4_graphics/"
file_name = paste(trait_name, param_name, sep ="_")
### export plot
tiff(paste0(dir_out,file_name, ".tiff"),
units="cm", width=7, height=6.5, res=600)
print(plot_param)
dev.off()
### choose a trait!
trait_name = "sla"
### import path
imp_path = paste0("2_trait_results/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
### vector w position of best fit
i_best = which(all_best_models$model == most_freq_model)
### select parameter estimates from most freq best model
freq_best_estimates = all_best_estimates[i_best]
### from list to df
est_df = data.frame( t( sapply(freq_best_estimates,c) ) )
### pick one paramenter
param_name = "sigma"
col_names = colnames(est_df)[grepl(param_name, colnames(est_df))]
est = est_df[col_names]
### organzing df
param_df = est %>%
pivot_longer(cols = any_of(col_names),
names_to = "state",
values_to = "estimate") %>%
mutate(
state = case_when(
grepl("_1", state) ~ "forest_specialist",
grepl("_2", state) ~ "generalist",
grepl("_3", state) ~ "open_specialist"
)
)
### outlier boundaries
med = median(param_df$estimate, na.rm = T)
bound= IQR(param_df$estimate, na.rm = T)*1.5
up_bound = med + bound
dw_bound = med - bound
### cleaning data
clean_param_df = param_df %>%
filter(estimate < up_bound & estimate > dw_bound)
### describe
clean_param_df %>%
group_by(state) %>%
reframe(x = mean(estimate), SD = sd(estimate))
### y axis name
if(trait_name == "height"){
y_axis_name = "plant height (m)"
}
if(trait_name == "sla"){
y_axis_name = "SLA (mm2/mg)"
}
if(trait_name == "seed"){
y_axis_name = "seed mass (mg)"
}
### parameter symbol
if(param_name == "sigma"){
param_symbol = "\u03c3"
}
if(param_name == "theta"){
param_symbol = "\u03b8"
}
# plot parameter
plot_param = ggplot(data= clean_param_df,
aes(x=state,
y=estimate,
fill=state)) +
geom_point(aes(color=state),
position = position_jitter(width = 0.07),
size = 0.6,
alpha = 0.65) +
geom_boxplot(width = 0.5, outlier.shape = NA, alpha = 0.25)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
scale_x_discrete(labels= c(
"rainforest",
"generalist",
"open-vegetation"
)
) +
xlab("habitat range") +
ylab(paste(param_symbol, y_axis_name, sep = " ") )+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=10,face="bold"),
axis.text=element_text(size=8),
legend.position = "none")
### exporting directory
dir_out = "4_graphics/"
file_name = paste(trait_name, param_name, sep ="_")
### export plot
tiff(paste0(dir_out,file_name, ".tiff"),
units="cm", width=7, height=6.5, res=600)
print(plot_param)
dev.off()
### choose a trait!
trait_name = "height"
### import path
imp_path = paste0("2_trait_results/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
### vector w position of best fit
i_best = which(all_best_models$model == most_freq_model)
### select parameter estimates from most freq best model
freq_best_estimates = all_best_estimates[i_best]
### from list to df
est_df = data.frame( t( sapply(freq_best_estimates,c) ) )
### pick one paramenter
param_name = "sigma"
col_names = colnames(est_df)[grepl(param_name, colnames(est_df))]
est = est_df[col_names]
### organzing df
param_df = est %>%
pivot_longer(cols = any_of(col_names),
names_to = "state",
values_to = "estimate") %>%
mutate(
state = case_when(
grepl("_1", state) ~ "forest_specialist",
grepl("_2", state) ~ "generalist",
grepl("_3", state) ~ "open_specialist"
)
)
### outlier boundaries
med = median(param_df$estimate, na.rm = T)
bound= IQR(param_df$estimate, na.rm = T)*1.5
up_bound = med + bound
dw_bound = med - bound
### cleaning data
clean_param_df = param_df %>%
filter(estimate < up_bound & estimate > dw_bound)
### describe
clean_param_df %>%
group_by(state) %>%
reframe(x = mean(estimate), SD = sd(estimate))
### y axis name
if(trait_name == "height"){
y_axis_name = "plant height (m)"
}
if(trait_name == "sla"){
y_axis_name = "SLA (mm2/mg)"
}
if(trait_name == "seed"){
y_axis_name = "seed mass (mg)"
}
### parameter symbol
if(param_name == "sigma"){
param_symbol = "\u03c3"
}
if(param_name == "theta"){
param_symbol = "\u03b8"
}
# plot parameter
plot_param = ggplot(data= clean_param_df,
aes(x=state,
y=estimate,
fill=state)) +
geom_point(aes(color=state),
position = position_jitter(width = 0.07),
size = 0.6,
alpha = 0.65) +
geom_boxplot(width = 0.5, outlier.shape = NA, alpha = 0.25)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
scale_x_discrete(labels= c(
"rainforest",
"generalist",
"open-vegetation"
)
) +
xlab("habitat range") +
ylab(paste(param_symbol, y_axis_name, sep = " ") )+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=10,face="bold"),
axis.text=element_text(size=8),
legend.position = "none")
### exporting directory
dir_out = "4_graphics/"
file_name = paste(trait_name, param_name, sep ="_")
### export plot
tiff(paste0(dir_out,file_name, ".tiff"),
units="cm", width=7, height=6.5, res=600)
print(plot_param)
dev.off()
### choose a trait!
trait_name = "height"
### import path
imp_path = paste0("2_trait_results/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
### vector w position of best fit
i_best = which(all_best_models$model == most_freq_model)
### select parameter estimates from most freq best model
freq_best_estimates = all_best_estimates[i_best]
### from list to df
est_df = data.frame( t( sapply(freq_best_estimates,c) ) )
### pick one paramenter
param_name = "theta"
col_names = colnames(est_df)[grepl(param_name, colnames(est_df))]
est = est_df[col_names]
### organzing df
param_df = est %>%
pivot_longer(cols = any_of(col_names),
names_to = "state",
values_to = "estimate") %>%
mutate(
state = case_when(
grepl("_1", state) ~ "forest_specialist",
grepl("_2", state) ~ "generalist",
grepl("_3", state) ~ "open_specialist"
)
)
### outlier boundaries
med = median(param_df$estimate, na.rm = T)
bound= IQR(param_df$estimate, na.rm = T)*1.5
up_bound = med + bound
dw_bound = med - bound
### cleaning data
clean_param_df = param_df %>%
filter(estimate < up_bound & estimate > dw_bound)
### describe
clean_param_df %>%
group_by(state) %>%
reframe(x = mean(estimate), SD = sd(estimate))
### y axis name
if(trait_name == "height"){
y_axis_name = "plant height (m)"
}
if(trait_name == "sla"){
y_axis_name = "SLA (mm2/mg)"
}
if(trait_name == "seed"){
y_axis_name = "seed mass (mg)"
}
### parameter symbol
if(param_name == "sigma"){
param_symbol = "\u03c3"
}
if(param_name == "theta"){
param_symbol = "\u03b8"
}
# plot parameter
plot_param = ggplot(data= clean_param_df,
aes(x=state,
y=estimate,
fill=state)) +
geom_point(aes(color=state),
position = position_jitter(width = 0.07),
size = 0.6,
alpha = 0.65) +
geom_boxplot(width = 0.5, outlier.shape = NA, alpha = 0.25)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
scale_x_discrete(labels= c(
"rainforest",
"generalist",
"open-vegetation"
)
) +
xlab("habitat range") +
ylab(paste(param_symbol, y_axis_name, sep = " ") )+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=10,face="bold"),
axis.text=element_text(size=8),
legend.position = "none")
### exporting directory
dir_out = "4_graphics/"
file_name = paste(trait_name, param_name, sep ="_")
### export plot
tiff(paste0(dir_out,file_name, ".tiff"),
units="cm", width=7, height=6.5, res=600)
print(plot_param)
dev.off()
### choose a trait!
trait_name = "sla"
### import path
imp_path = paste0("2_trait_results/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
### vector w position of best fit
i_best = which(all_best_models$model == most_freq_model)
### select parameter estimates from most freq best model
freq_best_estimates = all_best_estimates[i_best]
### from list to df
est_df = data.frame( t( sapply(freq_best_estimates,c) ) )
### pick one paramenter
param_name = "theta"
col_names = colnames(est_df)[grepl(param_name, colnames(est_df))]
est = est_df[col_names]
### organzing df
param_df = est %>%
pivot_longer(cols = any_of(col_names),
names_to = "state",
values_to = "estimate") %>%
mutate(
state = case_when(
grepl("_1", state) ~ "forest_specialist",
grepl("_2", state) ~ "generalist",
grepl("_3", state) ~ "open_specialist"
)
)
### outlier boundaries
med = median(param_df$estimate, na.rm = T)
bound= IQR(param_df$estimate, na.rm = T)*1.5
up_bound = med + bound
dw_bound = med - bound
### cleaning data
clean_param_df = param_df %>%
filter(estimate < up_bound & estimate > dw_bound)
### describe
clean_param_df %>%
group_by(state) %>%
reframe(x = mean(estimate), SD = sd(estimate))
### y axis name
if(trait_name == "height"){
y_axis_name = "plant height (m)"
}
if(trait_name == "sla"){
y_axis_name = "SLA (mm2/mg)"
}
if(trait_name == "seed"){
y_axis_name = "seed mass (mg)"
}
### parameter symbol
if(param_name == "sigma"){
param_symbol = "\u03c3"
}
if(param_name == "theta"){
param_symbol = "\u03b8"
}
# plot parameter
plot_param = ggplot(data= clean_param_df,
aes(x=state,
y=estimate,
fill=state)) +
geom_point(aes(color=state),
position = position_jitter(width = 0.07),
size = 0.6,
alpha = 0.65) +
geom_boxplot(width = 0.5, outlier.shape = NA, alpha = 0.25)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
scale_x_discrete(labels= c(
"rainforest",
"generalist",
"open-vegetation"
)
) +
xlab("habitat range") +
ylab(paste(param_symbol, y_axis_name, sep = " ") )+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=10,face="bold"),
axis.text=element_text(size=8),
legend.position = "none")
### exporting directory
dir_out = "4_graphics/"
file_name = paste(trait_name, param_name, sep ="_")
### export plot
tiff(paste0(dir_out,file_name, ".tiff"),
units="cm", width=7, height=6.5, res=600)
print(plot_param)
dev.off()
### choose a trait!
trait_name = "seed"
### import path
imp_path = paste0("2_trait_results/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
### vector w position of best fit
i_best = which(all_best_models$model == most_freq_model)
### select parameter estimates from most freq best model
freq_best_estimates = all_best_estimates[i_best]
### from list to df
est_df = data.frame( t( sapply(freq_best_estimates,c) ) )
### pick one paramenter
param_name = "theta"
col_names = colnames(est_df)[grepl(param_name, colnames(est_df))]
est = est_df[col_names]
### organzing df
param_df = est %>%
pivot_longer(cols = any_of(col_names),
names_to = "state",
values_to = "estimate") %>%
mutate(
state = case_when(
grepl("_1", state) ~ "forest_specialist",
grepl("_2", state) ~ "generalist",
grepl("_3", state) ~ "open_specialist"
)
)
### outlier boundaries
med = median(param_df$estimate, na.rm = T)
bound= IQR(param_df$estimate, na.rm = T)*1.5
up_bound = med + bound
dw_bound = med - bound
### cleaning data
clean_param_df = param_df %>%
filter(estimate < up_bound & estimate > dw_bound)
### describe
clean_param_df %>%
group_by(state) %>%
reframe(x = mean(estimate), SD = sd(estimate))
### y axis name
if(trait_name == "height"){
y_axis_name = "plant height (m)"
}
if(trait_name == "sla"){
y_axis_name = "SLA (mm2/mg)"
}
if(trait_name == "seed"){
y_axis_name = "seed mass (mg)"
}
### parameter symbol
if(param_name == "sigma"){
param_symbol = "\u03c3"
}
if(param_name == "theta"){
param_symbol = "\u03b8"
}
# plot parameter
plot_param = ggplot(data= clean_param_df,
aes(x=state,
y=estimate,
fill=state)) +
geom_point(aes(color=state),
position = position_jitter(width = 0.07),
size = 0.6,
alpha = 0.65) +
geom_boxplot(width = 0.5, outlier.shape = NA, alpha = 0.25)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
scale_x_discrete(labels= c(
"rainforest",
"generalist",
"open-vegetation"
)
) +
xlab("habitat range") +
ylab(paste(param_symbol, y_axis_name, sep = " ") )+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=10,face="bold"),
axis.text=element_text(size=8),
legend.position = "none")
### exporting directory
dir_out = "4_graphics/"
file_name = paste(trait_name, param_name, sep ="_")
### export plot
tiff(paste0(dir_out,file_name, ".tiff"),
units="cm", width=7, height=6.5, res=600)
print(plot_param)
dev.off()
