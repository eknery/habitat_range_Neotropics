anc_states_list = list()
for (i in 1:n_phylo){
### importing phylogenetic tree
pruned_phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
pruned_phylo = read.tree(pruned_phylo_path)
### fitting equal rates
er_fit = fitDiscrete(phy = pruned_phylo ,
dat = keep_eco_states,
model="ER")
### fitting symmetric
ard_fit = fitDiscrete(phy = pruned_phylo ,
dat =keep_eco_states,
model="ARD")
### picking AICc scores
aicc= c(er_fit$opt$aicc, ard_fit$opt$aicc)
names(aicc) = c("ER","ARD")
### chossing best transition model
if (aicc[["ER"]] <= aicc[["ARD"]]) {
model = "ER"
} else {
model = "ARD"
}
### choosing Q matrix
if(model == "ER"){
q_values= c("ER", er_fit$opt$q12, er_fit$opt$q21)
names(q_values) = c("model","q12","q21")
}
if(model == "ARD"){
q_values= c("ARD",ard_fit$opt$q12, ard_fit$opt$q21)
names(q_values) = c("model", "q12","q21")
}
### keeping best fit Q matrix
q_values_list[[i]] = q_values
### prior for ancestral state
pi = c(1,0)
names(pi) = c("generalist", "specialist")
### infer simmaps
all_maps = phytools::make.simmap(tree = pruned_phylo,
x = keep_eco_states,
model= model,
nsim=100,
pi = pi
)
### describe maps
des_map =  phytools::describe.simmap(all_maps)
### ancestral states probs
ace = des_map$ace
### all states
all_states = colnames(ace)[apply(ace,1,which.max)]
### ancestral node states
anc_states = all_states[1:n_node]
### adding to list
anc_states_list[[i]] = anc_states
print(paste0("Ancestal reconstruction done:", i))
}
### exporting ancetral state list
saveRDS(anc_states_list, "2_trait_analyses/q_values_list.RDS")
### exporting ancetral state list
saveRDS(anc_states_list, "2_trait_analyses/anc_states_list.RDS")
### exporting ancetral state list
saveRDS(q_values_list, "2_trait_analyses/q_values_list.RDS")
### exporting ancetral state list
saveRDS(anc_states_list, "2_trait_analyses/anc_states_list.RDS")
q_values_list
anc_states_list
### setting regime df
species = sp_traits$species
regime = keep_eco_states
## trait name
trait_name = "seed"
## trait values
trait = sp_traits[[trait_name]]
se = sp_traits[[trait_name]] / sqrt(sp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
dir_check = dir.exists(paths=paste("2_trait_analyses/OUWIE/",trait_name, sep="") )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= paste("2_trait_analyses/OUWIE/",trait_name, sep="") )
}
### model to fit
all_models = c("BM1","BMS","OU1", "OUM","OUMV")
### model fit table
all_best_models = data.frame(matrix(NA, nrow= n_phylo, ncol=4))
colnames(all_best_models) = c(c("model","llik","aicc","delta_aicc"))
### best estiamtes list
all_best_estimates = list()
for (i in 1:n_phylo){
### importing phylogenetic tree
pruned_phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
pruned_phylo = read.tree(pruned_phylo_path)
### adding ancestral states to phylo tree
pruned_phylo$node.label = anc_states_list[[i]]
all_fits = fit_evo_models(phy= pruned_phylo,
data= sp_regime_trait,
mserr = 'known',
models_to_fit = all_models)
best_choice = choose_best(all_fits)
all_best_models[i,] = best_choice$best_fit
all_best_estimates[[i]] = best_choice$best_estimates
print(paste0("Trait evolution done: ", i) )
}
### export path
exp_path = paste0("2_trait_analyses/OUWIE/", trait_name)
### exporting model fit
saveRDS(all_best_models, paste0(exp_path, "/all_best_models.RDS") )
### exporting best estimates list
saveRDS(all_best_estimates, paste0(exp_path, "/all_best_estimates.RDS") )
### choose a trait!
trait_name = "sla"
### choose a trait!
trait_name = "seed"
### import path
imp_path = paste0("2_trait_analyses/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
### vector w position of best fit
i_best = which(all_best_models$model == most_freq_model)
### select parameter estimates from most freq best model
freq_best_estimates = all_best_estimates[i_best]
### from list to df
est_df = data.frame( t( sapply(freq_best_estimates,c) ) )
apply(est_df, MARGIN = 2, mean)
apply(est_df, MARGIN = 2, sd)
count_models
apply(est_df, MARGIN = 2, mean)
apply(est_df, MARGIN = 2, sd)
sqrt(0.356)
sqrt(0.068)
sqrt(0.036)
sqrt(0.007)
apply(est_df, MARGIN = 2, mean)
apply(est_df, MARGIN = 2, sd)
## trait name
trait_name = "height"
## trait values
trait = sp_traits[[trait_name]]
se = sp_traits[[trait_name]] / sqrt(sp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
dir_check = dir.exists(paths=paste("2_trait_analyses/OUWIE/",trait_name, sep="") )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= paste("2_trait_analyses/OUWIE/",trait_name, sep="") )
}
### model to fit
all_models = c("BM1","BMS","OU1", "OUM","OUMV")
### model fit table
all_best_models = data.frame(matrix(NA, nrow= n_phylo, ncol=4))
colnames(all_best_models) = c(c("model","llik","aicc","delta_aicc"))
### best estiamtes list
all_best_estimates = list()
for (i in 1:n_phylo){
### importing phylogenetic tree
pruned_phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
pruned_phylo = read.tree(pruned_phylo_path)
### adding ancestral states to phylo tree
pruned_phylo$node.label = anc_states_list[[i]]
all_fits = fit_evo_models(phy= pruned_phylo,
data= sp_regime_trait,
mserr = 'known',
models_to_fit = all_models)
best_choice = choose_best(all_fits)
all_best_models[i,] = best_choice$best_fit
all_best_estimates[[i]] = best_choice$best_estimates
print(paste0("Trait evolution done: ", i) )
}
### export path
exp_path = paste0("2_trait_analyses/OUWIE/", trait_name)
### exporting model fit
saveRDS(all_best_models, paste0(exp_path, "/all_best_models.RDS") )
### exporting best estimates list
saveRDS(all_best_estimates, paste0(exp_path, "/all_best_estimates.RDS") )
## trait name
trait_name = "sla"
## trait values
trait = sp_traits[[trait_name]]
se = sp_traits[[trait_name]] / sqrt(sp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
dir_check = dir.exists(paths=paste("2_trait_analyses/OUWIE/",trait_name, sep="") )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= paste("2_trait_analyses/OUWIE/",trait_name, sep="") )
}
### model to fit
all_models = c("BM1","BMS","OU1", "OUM","OUMV")
### model fit table
all_best_models = data.frame(matrix(NA, nrow= n_phylo, ncol=4))
colnames(all_best_models) = c(c("model","llik","aicc","delta_aicc"))
### best estiamtes list
all_best_estimates = list()
for (i in 1:n_phylo){
### importing phylogenetic tree
pruned_phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
pruned_phylo = read.tree(pruned_phylo_path)
### adding ancestral states to phylo tree
pruned_phylo$node.label = anc_states_list[[i]]
all_fits = fit_evo_models(phy= pruned_phylo,
data= sp_regime_trait,
mserr = 'known',
models_to_fit = all_models)
best_choice = choose_best(all_fits)
all_best_models[i,] = best_choice$best_fit
all_best_estimates[[i]] = best_choice$best_estimates
print(paste0("Trait evolution done: ", i) )
}
### export path
exp_path = paste0("2_trait_analyses/OUWIE/", trait_name)
### exporting model fit
saveRDS(all_best_models, paste0(exp_path, "/all_best_models.RDS") )
### exporting best estimates list
saveRDS(all_best_estimates, paste0(exp_path, "/all_best_estimates.RDS") )
trait_name
### choose a trait!
trait_name = "sla"
### import path
imp_path = paste0("2_trait_analyses/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
count_models
### choose a trait!
trait_name = "height"
### import path
imp_path = paste0("2_trait_analyses/OUWIE/", trait_name)
### importing model fit
all_best_models = readRDS( paste0(imp_path, "/all_best_models.RDS"))
### importing model parameters
all_best_estimates =  readRDS( paste0(imp_path, "/all_best_estimates.RDS"))
### most frequent best fit
count_models = table(all_best_models$model)
most_freq_model = names(count_models)[count_models == max(count_models)]
count_models
q_values_list = readRDS("2_trait_analyses/q_values_list.RDS")
q_values_list
data.frame( t( sapply(q_values_list,c) ) )
q_values_df = data.frame( t( sapply(q_values_list,c) ) )
### most common best fit
table(q_values_df$model)
### describing transition rates
apply(q_values_df, MARGIN = 2, mean)
### describing transition rates
apply(q_values_df[,-1], MARGIN = 2, mean)
### transition rates
q12 = as.numeric(q_values_df$q12)
q21 = as.numeric(q_values_df$q21)
### describing transition rates
mean(q12)
summary(q12, sd)
sd(q12)
### describing transition rates
mean(q12, q21)
mean(q21)
sd(q21)
### describing transition rates
mean(q12)
sd(q12)
221-3
218/3
phytools::plotTree(tree=mcc_phylo,
fsize=0.6,
ftype="i")
piecol=state_cols,
cex=0.5)
nodelabels(node=(1+n_tips):(n_tips+n_inner_nodes),
pie= inner_node_probs,
piecol=state_cols,
cex=1.2)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
tiff("4_graphics/simmap.tiff", units="in", width=4, height=6, res=600)
phytools::plotTree(tree=mcc_phylo,
fsize=0.6,
ftype="i")
tiplabels(pie=tip_states_probs,
piecol=state_cols,
cex=0.4)
nodelabels(node=(1+n_tips):(n_tips+n_inner_nodes),
pie= inner_node_probs,
piecol=state_cols,
cex=1.2)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
tiff("4_graphics/simmap.tiff", units="in", width=4, height=6, res=600)
phytools::plotTree(tree=mcc_phylo,
fsize=0.6,
ftype="i")
tiplabels(pie=tip_states_probs,
piecol=state_cols,
cex=0.4)
nodelabels(node=(1+n_tips):(n_tips+n_inner_nodes),
pie= inner_node_probs,
piecol=state_cols,
cex=1.1)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
if (!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("geiger")) install.packages("geiger"); library("geiger")
### create directory for pgls models
# check if dir exists
dir_check = dir.exists(paths="4_graphics")
# create dir if not created yet
if (dir_check == FALSE){
dir.create(path= "4_graphics", showWarnings = , recursive = FALSE, mode = "0777")
}
### phylogenetic tree
mcc_phylo = read.tree("0_data/mcc_phylo.nwk")
### loading occurrence count per domain
spp_count_domain = read.table("0_data/spp_count_domain.csv", h=T, sep=",")
### loading trait data
trait_mtx = read.table("0_data/trait_matrix.csv",
h=T, sep=",", na.strings = "na")
### setting regime df
species = sp_traits$species
sp_traits = trait_mtx %>%
group_by(species) %>%
reframe(height = mean(plant_height, na.rm=T) ,
sla =  mean(sla, na.rm=T) ,
seed = mean(seed_weight, na.rm=T) ,
n = n()
)
### setting regime df
species = sp_traits$species
### sampled species
sampled_sp = unique(trait_mtx$species)
### traits per species
sp_traits = trait_mtx %>%
group_by(species) %>%
reframe(height = mean(plant_height, na.rm=T) ,
sla =  mean(sla, na.rm=T) ,
seed = mean(seed_weight, na.rm=T) ,
n = n()
)
### keeping only sampled species
keep_eco_states = eco_states[names(eco_states) %in% sampled_sp]
### define ecological state
high_ths = 0.90
low_ths = (1 - high_ths)
eco_states = af_percentage = spp_count_domain$AF/ apply(spp_count_domain[,-1], MARGIN = 1, FUN=sum)
eco_states[af_percentage >= high_ths] = "specialist"
eco_states[af_percentage < high_ths] = "generalist"
names(eco_states) = spp_count_domain$species
### keeping only sampled species
keep_eco_states = eco_states[names(eco_states) %in% sampled_sp]
### setting regime df
species = sp_traits$species
regime = keep_eco_states
## trait name
trait_name = "sla"
## trait values
trait = sp_traits[[trait_name]]
se = sp_traits[[trait_name]] / sqrt(sp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65)
### changing to factor
sp_regime_trait %>%
mutate(regime = factor(regime, levels= c( "specialist", "generalist")))
### changing to factor
sp_regime_trait = sp_regime_trait %>%
mutate(regime = factor(regime, levels= c( "specialist", "generalist")))
### species regime and traits
sp_regime_trait = data.frame(species, regime, trait, se)
### changing to factor
sp_regime_trait = sp_regime_trait %>%
mutate(regime = factor(regime, levels= c( "specialist", "generalist")))
tiff("4_graphics/qvalues_geographic_distribution.tiff",
units="in", width=3.5, height=3, res=600)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=mycols)+
scale_colour_manual(values=mycols)+
xlab("habitat range")+ ylab()+
scale_x_discrete(labels=c("AF" = "AF-endemic", "AFother" = "AF and other\ndomains", "other" = "outside AF"))+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=14,face="bold"),axis.text.x=element_text(size=8),legend.position = "none")
if (!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("Hmisc")) install.packages("Hmisc"); library("Hmisc")
if (!require("plyr")) install.packages("plyr"); library("plyr")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("geiger")) install.packages("geiger"); library("geiger")
## trait name
trait_name = "height"
## trait values
trait = sp_traits[[trait_name]]
se = sp_traits[[trait_name]] / sqrt(sp_traits[["n"]])
### species regime and traits
sp_regime_trait = data.frame(species, regime, trait, se)
### changing to factor
sp_regime_trait = sp_regime_trait %>%
mutate(regime = factor(regime, levels= c( "specialist", "generalist")))
tiff("4_graphics/qvalues_geographic_distribution.tiff",
units="in", width=3.5, height=3, res=600)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=mycols)+
scale_colour_manual(values=mycols)+
xlab("habitat range")+ ylab()+
scale_x_discrete(labels=c("AF" = "AF-endemic", "AFother" = "AF and other\ndomains", "other" = "outside AF"))+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=14,face="bold"),axis.text.x=element_text(size=8),legend.position = "none")
if (!require("Hmisc")) install.packages("Hmisc"); library("Hmisc")
if (!require("PupillometryR")) install.packages("PupillometryR"); library("PupillometryR")
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=mycols)+
scale_colour_manual(values=mycols)+
xlab("habitat range")+ ylab()+
scale_x_discrete(labels=c("AF" = "AF-endemic", "AFother" = "AF and other\ndomains", "other" = "outside AF"))+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=14,face="bold"),axis.text.x=element_text(size=8),legend.position = "none")
### color param
state_cols=c( "darkorange","darkgreen")
names(state_cols)=c("generalist",  "specialist")
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
xlab("habitat range")+ ylab()+
scale_x_discrete(labels=c("AF" = "AF-endemic",
"other" = "outside AF"))+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=14,face="bold"),
axis.text.x=element_text(size=8),
legend.position = "none")
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
xlab("habitat range")+ ylab(trait_name)+
scale_x_discrete(labels=c("AF" = "AF-endemic",
"other" = "outside AF"))+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=14,face="bold"),
axis.text.x=element_text(size=8),
legend.position = "none")
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.25)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.25) +
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)) +
geom_point(position = position_jitter(width = 0.07), size = 2, alpha = 0.65)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime))
