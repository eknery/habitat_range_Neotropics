panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=8,face="bold"),
axis.text=element_text(size=6),
legend.position = "none")
### plotting
tiff(file_name,
units="in", width=2.7, height= 2, res=600)
ggplot(data= sp_regime_trait,
aes(x=regime,
y=trait,
color = regime,
fill=regime)
) +
geom_point(position = position_jitter(width = 0.10),
size = 1,
alpha = 0.65
) +
geom_boxplot(weight = 0.5/length(unique(sp_regime_trait$regime)),
linewidth = 0.2,
alpha = 0.25,
outlier.shape = NA
)+
scale_fill_manual(values=state_cols)+
scale_colour_manual(values=state_cols)+
xlab("habitat range")+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=8,face="bold"),
axis.text=element_text(size=6),
legend.position = "none")
dev.off()
### fitting ER
er_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model="ER")
### fitting SYM
sym_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model="SYM")
### fitting ARD
ard_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model="ARD")
### picking AICc scores
aicc = c(er_fit$opt$aicc, sym_fit$opt$aicc, ard_fit$opt$aicc)
names(aicc) = c("ER","SYM","ARD")
### parameter numbers
k = c(1, 3, 6)
names(k) = c("ER","SYM","ARD")
### delta aicc
daicc = sort(aicc  - min(aicc))
### lowest daicc
fir_model = names(daicc[1])
sec_model = names(daicc[2])
### chossing best transition model
if (fir_model == "ER") {
model = "ER"
}
if (fir_model != "ER"){
if(daicc[sec_model] >= 2){
model = fir_model
}
if(daicc[2] < 2 & k[fir_model] < k[sec_model]){
model = fir_model
}
if(daicc[2] < 2 & k[fir_model] > k[sec_model]){
model = sec_model
}
}
model
### infer simmaps
all_maps = phytools::make.simmap(tree = mcc_phylo,
x = spp_states,
model= model,
nsim=100
)
### describe maps
des_map =  phytools::describe.simmap(all_maps)
### ancestral states probs
ace = des_map$ace
### setting states
# tip states probs
tip_states_probs = ace[(1+n_inner_nodes):(n_inner_nodes +n_tips), ]
tip_states_probs = tip_states_probs[,names(state_cols)]
# ancestral state probs
inner_node_probs = ace[1:n_inner_nodes,]
inner_node_probs = inner_node_probs[,names(state_cols)]
phytools::plotTree(tree=mcc_phylo,
fsize=0.6,
ftype="i")
tiplabels(pie=tip_states_probs,
piecol=state_cols,
cex=0.45)
nodelabels(node=(1+n_tips):(n_tips+n_inner_nodes),
pie= inner_node_probs,
piecol=state_cols,
cex=1.2)
tiff("4_graphics/simmap.tiff", units="in", width=3.3, height=6, res=600)
phytools::plotTree(tree=mcc_phylo,
fsize=0.6,
ftype="i")
tiplabels(pie=tip_states_probs,
piecol=state_cols,
cex=0.45)
nodelabels(node=(1+n_tips):(n_tips+n_inner_nodes),
pie= inner_node_probs,
piecol=state_cols,
cex=1.2)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
if (!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("geiger")) install.packages("geiger"); library("geiger")
if (!require("phytools")) install.packages("phytools"); library("phytools")
if (!require("OUwie")) install.packages("OUwie"); library("OUwie")
if (!require("nlme")) install.packages("nlme"); library("nlme")
source("scripts/function_fit_evo_models.R")
source("scripts/function_choose_best.R")
### loading phylogenetic tree
mcc_phylo = read.tree("0_data/pruned_mcc_phylo.nwk")
### counting pruned phylognetic trees
n_phylo = length(list.files("0_data/pruned_phylos"))
### loading occurrence count per domain
habitat_range = readRDS("1_habitat_results/habitat_range.RDS")
### loading trait data
trait_mtx = read.table("0_data/trait_matrix.csv",
h=T, sep=",", na.strings = "na")
### sampled species
sampled_sp = unique(trait_mtx$species)
### defininf states
spp_states = habitat_range$range
names(spp_states) = habitat_range$species
### trait values per species
spp_traits = trait_mtx %>%
group_by(species) %>%
reframe(height = mean(plant_height, na.rm=T) ,
sla =  mean(sla, na.rm=T) ,
seed = mean(seed_weight, na.rm=T) ,
n = n()
)
### choosing a trait
trait = log(spp_traits$seed)
names(trait) = spp_traits$species
### fitting models
fit_bm = fitContinuous(phy= mcc_phylo, dat = trait,  model="BM")
fit_ou = fitContinuous(phy= mcc_phylo, dat = trait,  model="OU")
### choosing model aicc
if(fit_bm$opt$aicc < fit_ou$opt$aicc){
sigsq = fit_bm$opt$sigsq
cor_str = corBrownian(sigsq, phy = mcc_phylo, form= ~1)
}
if(fit_bm$opt$aicc > fit_ou$opt$aicc & (fit_bm$opt$aicc - fit_ou$opt$aicc) >= 2 ){
alpha = fit_ou$opt$alpha
cor_str = corMartins(alpha, phy = mcc_phylo, form= ~1)
}
### fitting pgls
fit_gls = gls(trait ~ spp_states,
correlation= cor_str,
method = "REML")
summary(fit_gls)
plot(fit_gls)
### checking residuals
res = resid(fit_gls)[1:nrow(spp_traits)]
hist(res)
shapiro.test(res)
### criando repositÃ³rio para os testes OUWIE
dir_check = dir.exists(paths="2_trait_results/OUWIE" )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= "2_trait_results/OUWIE" )
}
### importing habita range
habitat_range = readRDS("1_habitat_results/habitat_range.RDS")
### defininf states
spp_states = habitat_range$range
names(spp_states) = habitat_range$species
spp_states
### ancestral node numbers
n_node = mcc_phylo$Nnode
### list of ancestral states for each phylo
q_values_list = list()
### list of ancestral states for each phylo
anc_states_list = list()
for (i in 1:n_phylo){
### importing phylogenetic tree
phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
phylo = read.tree(phylo_path)
### fitting ER
er_fit = fitDiscrete(phy = phylo ,
dat = spp_states,
model="ER")
### fitting SYM
sym_fit = fitDiscrete(phy = phylo ,
dat = spp_states,
model="SYM")
### fitting ARD
ard_fit = fitDiscrete(phy = phylo ,
dat = spp_states,
model="ARD")
### picking AICc scores
aicc= c(er_fit$opt$aicc, sym_fit$opt$aicc, ard_fit$opt$aicc)
names(aicc) = c("ER","SYM","ARD")
### parameter numbers
k = c(1, 3, 6)
names(k) = c("ER","SYM","ARD")
### delta aicc
daicc = sort(aicc  - min(aicc))
### lowest daicc
fir_model = names(daicc[1])
sec_model = names(daicc[2])
### chossing best transition model
if (fir_model == "ER") {
model = "ER"
}
if (fir_model != "ER"){
if(daicc[sec_model] >= 2){
model = fir_model
}
if(daicc[2] < 2 & k[fir_model] < k[sec_model]){
model = fir_model
}
if(daicc[2] < 2 & k[fir_model] > k[sec_model]){
model = sec_model
}
}
### choosing Q matrix
if(model == "ER"){
q_values = unlist(er_fit$opt[ which(grepl("q", names(er_fit$opt))) ] )
names(model) = "model"
q_values = c(model, q_values)
}
if(model == "SYM"){
q_values = unlist(sym_fit$opt[ which(grepl("q", names(sym_fit$opt))) ] )
names(model) = "model"
q_values = c(model, q_values)
}
if(model == "ARD"){
q_values = unlist(ard_fit$opt[ which(grepl("q", names(ard_fit$opt))) ] )
names(model) = "model"
q_values = c(model, q_values)
}
### keeping best fit Q matrix
q_values_list[[i]] = q_values
### infer simmaps
all_maps = phytools::make.simmap(tree = phylo,
x = spp_states,
model= model,
nsim=100
)
### describe maps
des_map =  phytools::describe.simmap(all_maps)
### ancestral states probs
ace = des_map$ace
### all states
all_states = colnames(ace)[apply(ace,1,which.max)]
### ancestral node states
anc_states = all_states[1:n_node]
### adding to list
anc_states_list[[i]] = anc_states
print(paste0("Ancestal reconstruction done: ", i))
}
### exporting q-values list
saveRDS(q_values_list, "1_habitat_results/q_values_list.RDS")
### exporting ancetral state list
saveRDS(anc_states_list, "1_habitat_results/anc_states_list.RDS")
phylo = mcc_phylo
### fitting ER
er_fit = fitDiscrete(phy = phylo ,
dat = spp_states,
model="ER")
### fitting SYM
sym_fit = fitDiscrete(phy = phylo ,
dat = spp_states,
model="SYM")
### fitting ARD
ard_fit = fitDiscrete(phy = phylo ,
dat = spp_states,
model="ARD")
### picking AICc scores
aicc= c(er_fit$opt$aicc, sym_fit$opt$aicc, ard_fit$opt$aicc)
names(aicc) = c("ER","SYM","ARD")
### parameter numbers
k = c(1, 3, 6)
names(k) = c("ER","SYM","ARD")
### delta aicc
daicc = sort(aicc  - min(aicc))
### lowest daicc
fir_model = names(daicc[1])
sec_model = names(daicc[2])
### list of ancestral states for each phylo
q_values_list = list()
### list of ancestral states for each phylo
anc_states_list = list()
aicc
fir_model
### chossing best transition model
if (fir_model == "ER") {
model = "ER"
}
if (fir_model != "ER"){
if(daicc[sec_model] >= 2){
model = fir_model
}
if(daicc[2] < 2 & k[fir_model] < k[sec_model]){
model = fir_model
}
if(daicc[2] < 2 & k[fir_model] > k[sec_model]){
model = sec_model
}
}
### choosing Q matrix
if(model == "ER"){
q_values = unlist(er_fit$opt[ which(grepl("q", names(er_fit$opt))) ] )
names(model) = "model"
q_values = c(model, q_values)
}
if(model == "SYM"){
q_values = unlist(sym_fit$opt[ which(grepl("q", names(sym_fit$opt))) ] )
names(model) = "model"
q_values = c(model, q_values)
}
if(model == "ARD"){
q_values = unlist(ard_fit$opt[ which(grepl("q", names(ard_fit$opt))) ] )
names(model) = "model"
q_values = c(model, q_values)
}
### keeping best fit Q matrix
q_values_list[[i]] = q_values
### infer simmaps
all_maps = phytools::make.simmap(tree = phylo,
x = spp_states,
model= model,
nsim=100
)
### describe maps
des_map =  phytools::describe.simmap(all_maps)
### ancestral states probs
ace = des_map$ace
### all states
all_states = colnames(ace)[apply(ace,1,which.max)]
### ancestral node states
anc_states = all_states[1:n_node]
### adding to list
anc_states_list[[i]] = anc_states
### exporting q-values list
saveRDS(q_values_list, "1_habitat_results/q_values_list.RDS")
### exporting ancetral state list
saveRDS(anc_states_list, "1_habitat_results/anc_states_list.RDS")
### importing Q values
q_values_list = readRDS("1_habitat_results/q_values_list.RDS")
### from list to df
q_values_df = data.frame( t( sapply(q_values_list,c) ) )
### most common best fit
tab_models = table(q_values_df$model)
best_model= names(tab_models[tab_models == max(tab_models)])
tab_models
q_values_list
### list of ancestral states for each phylo
q_values_list = list()
### list of ancestral states for each phylo
anc_states_list = list()
i = 1
### list of ancestral states for each phylo
q_values_list = list()
### list of ancestral states for each phylo
anc_states_list = list()
q_values
### keeping best fit Q matrix
q_values_list[[i]] = q_values
anc_states
### adding to list
anc_states_list[[i]] = anc_states
anc_states_list
### exporting q-values list
saveRDS(q_values_list, "1_habitat_results/q_values_list.RDS")
### exporting ancetral state list
saveRDS(anc_states_list, "1_habitat_results/anc_states_list.RDS")
### importing Q values
q_values_list = readRDS("1_habitat_results/q_values_list.RDS")
### from list to df
q_values_df = data.frame( t( sapply(q_values_list,c) ) )
### most common best fit
tab_models = table(q_values_df$model)
best_model= names(tab_models[tab_models == max(tab_models)])
tab_models
anc_states_list
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= "2_trait_results/OUWIE" )
}
### loading ancetral state list
anc_states_list = readRDS("1_habitat_results/anc_states_list.RDS")
anc_states_list
### setting regime df
species = spp_traits$species
regime = spp_states
## trait name
trait_name = "height"
## trait values
trait = log( spp_traits[[trait_name]] )
se = sd(trait) / sqrt(spp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
dir_check = dir.exists(paths=paste("2_trait_results/OUWIE/",trait_name, sep="") )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= paste0("2_trait_results/OUWIE/",trait_name) )
}
### model to fit
all_models = c("BM1","BMS","OU1", "OUM","OUMV")
### model fit table
all_best_models = data.frame(matrix(NA, nrow= n_phylo, ncol=4))
colnames(all_best_models) = c(c("model","llik","aicc","delta_aicc"))
### best estiamtes list
all_best_estimates = list()
phylo
anc_states_list[[i]]
### adding ancestral states to phylo tree
phylo$node.label = anc_states_list[[i]]
### fitting all models
all_fits = fit_evo_models(phy= phylo,
data= sp_regime_trait,
mserr = 'known',
models_to_fit = all_models)
all_fits
best_choice = choose_best(all_fits)
best_choice
all_fits
all_best_models[i,] = best_choice$best_fit
all_best_estimates[[i]] = best_choice$best_estimates
### export path
exp_path = paste0("2_trait_results/OUWIE/", trait_name)
### exporting model fit
saveRDS(all_best_models, paste0(exp_path, "/all_best_models.RDS") )
### exporting best estimates list
saveRDS(all_best_estimates, paste0(exp_path, "/all_best_estimates.RDS") )
## trait name
trait_name = "sla"
## trait values
trait = log( spp_traits[[trait_name]] )
se = sd(trait) / sqrt(spp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
dir_check = dir.exists(paths=paste("2_trait_results/OUWIE/",trait_name, sep="") )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= paste0("2_trait_results/OUWIE/",trait_name) )
}
### model to fit
all_models = c("BM1","BMS","OU1", "OUM","OUMV")
### model fit table
all_best_models = data.frame(matrix(NA, nrow= n_phylo, ncol=4))
colnames(all_best_models) = c(c("model","llik","aicc","delta_aicc"))
### best estiamtes list
all_best_estimates = list()
sp_regime_trait
### fitting all models
all_fits = fit_evo_models(phy= phylo,
data= sp_regime_trait,
mserr = 'known',
models_to_fit = all_models)
all_fits
best_choice
best_choice = choose_best(all_fits)
best_choic
best_choice
all_fits
all_best_models
all_best_models[i,] = best_choice$best_fit
all_best_estimates[[i]] = best_choice$best_estimates
### export path
exp_path = paste0("2_trait_results/OUWIE/", trait_name)
### exporting model fit
saveRDS(all_best_models, paste0(exp_path, "/all_best_models.RDS") )
### exporting best estimates list
saveRDS(all_best_estimates, paste0(exp_path, "/all_best_estimates.RDS") )
## trait name
trait_name = "seed"
## trait values
trait = log( spp_traits[[trait_name]] )
se = sd(trait) / sqrt(spp_traits[["n"]])
sp_regime_trait = data.frame(species, regime, trait, se)
## ouwie table
sp_regime_trait = data.frame(species, regime, trait, se)
dir_check = dir.exists(paths=paste("2_trait_results/OUWIE/",trait_name, sep="") )
# create output dir if not created yet
if (dir_check == FALSE){
dir.create(path= paste0("2_trait_results/OUWIE/",trait_name) )
}
### model to fit
all_models = c("BM1","BMS","OU1", "OUM","OUMV")
### model fit table
all_best_models = data.frame(matrix(NA, nrow= n_phylo, ncol=4))
colnames(all_best_models) = c(c("model","llik","aicc","delta_aicc"))
### best estiamtes list
all_best_estimates = list()
best_choice = choose_best(all_fits)
### fitting all models
all_fits = fit_evo_models(phy= phylo,
data= sp_regime_trait,
mserr = 'known',
models_to_fit = all_models)
best_choice = choose_best(all_fits)
best_choice
all_best_models[i,] = best_choice$best_fit
all_best_estimates[[i]] = best_choice$best_estimates
### export path
exp_path = paste0("2_trait_results/OUWIE/", trait_name)
### exporting model fit
saveRDS(all_best_models, paste0(exp_path, "/all_best_models.RDS") )
### exporting best estimates list
saveRDS(all_best_estimates, paste0(exp_path, "/all_best_estimates.RDS") )
